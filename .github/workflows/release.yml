name: Create and publish a Docker image

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-binaries:
    strategy:
      matrix:
        include:
          - OS: ubuntu-latest
            TARGET: x86_64-unknown-linux-gnu
            TARGET_NAME: linux-x86_64
          - OS: windows-latest
            TARGET: x86_64-pc-windows-msvc
            TARGET_NAME: win-x86_64
          - OS: macos-latest
            TARGET: x86_64-apple-darwin
            TARGET_NAME: macos-x86_64
    env:
      OS: ${{matrix.OS}}
      TARGET: ${{matrix.TARGET}}
      TARGET_NAME: ${{matrix.TARGET_NAME}}
      NAME: intersight_otel
    runs-on: ${{matrix.OS}}
    steps:
      - uses: actions/checkout@v2
      - name: Cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: build-cargo-registry-${{matrix.TARGET}}
      - name: Install rust target
        run: rustup target add $TARGET
      - name: Run build
        run: cargo build --release --target $TARGET
      - name: Compress
        run: |
          mkdir -p ./artifacts
          # windows is the only OS using a different convention for executable file name
          if [[ $OS =~ ^windows.*$ ]]; then
              EXEC=$NAME.exe
          else
              EXEC=$NAME
          fi
          if [[ $GITHUB_REF_TYPE =~ ^tag$ ]]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi
          mv ./target/$TARGET/release/$EXEC ./$EXEC
          tar -czf ./artifacts/$NAME-$TARGET_NAME-$TAG.tar.gz $EXEC
      # - name: Archive artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: result
      #     path: |
      #       ./artifacts
      - name: Upload release binaries
        uses: alexellis/upload-assets@0.4.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '["./artifacts/*.tar.gz"]'
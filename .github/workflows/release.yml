name: Create and publish a Docker image

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

defaults:
  run:
    shell: bash

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2.1.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.4.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4.0.0
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-binaries:
    strategy:
      matrix:
        include:
          - OS: ubuntu-latest
            TARGET: x86_64-unknown-linux-gnu
            TARGET_NAME: linux-x86_64
          - OS: windows-latest
            TARGET: x86_64-pc-windows-msvc
            TARGET_NAME: win-x86_64
          - OS: macos-latest
            TARGET: x86_64-apple-darwin
            TARGET_NAME: macos-x86_64
          - OS: macos-latest
            TARGET: aarch64-apple-darwin
            TARGET_NAME: macos-arm64
    env:
      OS: ${{matrix.OS}}
      TARGET: ${{matrix.TARGET}}
      TARGET_NAME: ${{matrix.TARGET_NAME}}
      NAME: intersight_otel
    runs-on: ${{matrix.OS}}
    steps:
      - uses: actions/checkout@v3
      - name: Cargo cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: build-cargo-registry-${{matrix.TARGET}}
      - name: Install rust target
        run: rustup target add $TARGET
      - name: Run build
        run: |
          if [[ $OS =~ ^windows.*$ ]]; then
            export VCPKG_ROOT=$VCPKG_INSTALLATION_ROOT
            vcpkg install openssl:x64-windows-static-md
            cargo build --release --target $TARGET
          else
            cargo build --release --target $TARGET
          fi
      - name: Compress
        run: |
          mkdir -p ./artifacts
          # windows is the only OS using a different convention for executable file name
          if [[ $OS =~ ^windows.*$ ]]; then
              EXEC=$NAME.exe
          else
              EXEC=$NAME
          fi
          if [[ $GITHUB_REF_TYPE =~ ^tag$ ]]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi
          tar --directory target/$TARGET/release -czf ./artifacts/$NAME-$TARGET_NAME-$TAG.tar.gz $EXEC
      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: result-${{matrix.TARGET_NAME}}
          path: |
            ./artifacts
  sign-macos-binaries:
    needs: build-binaries
    runs-on: macos-latest
    steps:
      - name: Download x86_64 artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: result-macos-x86_64
          path: ./artifacts-macos-x86_64
      - name: Download arm64 artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: result-macos-arm64
          path: ./artifacts-macos-arm64
      - name: Import Code-Signing Certificates
        uses: Apple-Actions/import-codesign-certs@v1
        with:
          # The certificates in a PKCS12 file encoded as a base64 string
          p12-file-base64: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT_P12_B64 }}
          # The password used to import the PKCS12 file.
          p12-password: ${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT_PASSWORD }}
      - name: Sign the mac binaries with Gon
        env:
          AC_USERNAME: ${{ secrets.AC_USERNAME }}
          AC_PASSWORD: ${{ secrets.AC_PASSWORD }}
          AC_TEAM: ${{ secrets.AC_TEAM }}
        run: |
          mkdir artifacts
          cp ./artifacts-macos-x86_64/* ./artifacts
          cp ./artifacts-macos-arm64/* ./artifacts

          echo Before signing
          echo ./artifacts contents:
          find ./artifacts -type f | xargs shasum

          if [[ $GITHUB_REF_TYPE =~ ^tag$ ]]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi

          mkdir -p ./macosbins/intersight_otel-macos-x86_64
          mkdir -p ./macosbins/intersight_otel-macos-arm64

          tar --directory ./macosbins/intersight_otel-macos-x86_64/ -xvzf ./artifacts/intersight_otel-macos-x86_64*.tar.gz 
          tar --directory ./macosbins/intersight_otel-macos-arm64/ -xvzf ./artifacts/intersight_otel-macos-arm64*.tar.gz 

          rm ./artifacts/intersight_otel-macos*.tar.gz

          echo Before signing
          echo ./artifacts contents:
          find ./artifacts -type f | xargs shasum
          echo ./macosbins contents:
          find ./macosbins -type f | xargs shasum

          # sign, zip, notarize and move into artifacts x86_64 binary
          codesign -s "Developer ID Application: C Gascoigne (JMQA292WQZ)" --deep -v -f -o runtime ./macosbins/intersight_otel-macos-x86_64/intersight_otel
          (cd ./macosbins/intersight_otel-macos-x86_64; zip intersight_otel-macos-x86_64-$TAG.zip intersight_otel )
          xcrun notarytool submit --apple-id "$AC_USERNAME" --password "$AC_PASSWORD" --team-id "$AC_TEAM" --wait --progress ./macosbins/intersight_otel-macos-x86_64/intersight_otel-macos-x86_64-$TAG.zip
          mv ./macosbins/intersight_otel-macos-x86_64/intersight_otel-macos-x86_64-$TAG.zip ./artifacts/

          # sign, zip, notarize and move into artifacts arm64 binary
          codesign -s "Developer ID Application: C Gascoigne (JMQA292WQZ)" --deep -v -f -o runtime ./macosbins/intersight_otel-macos-arm64/intersight_otel
          (cd ./macosbins/intersight_otel-macos-arm64; zip intersight_otel-macos-arm64-$TAG.zip intersight_otel )
          xcrun notarytool submit --apple-id "$AC_USERNAME" --password "$AC_PASSWORD" --team-id "$AC_TEAM" --wait --progress ./macosbins/intersight_otel-macos-arm64/intersight_otel-macos-arm64-$TAG.zip
          mv ./macosbins/intersight_otel-macos-arm64/intersight_otel-macos-arm64-$TAG.zip ./artifacts/

          echo After signing
          echo ./artifacts contents:
          find ./artifacts -type f | xargs shasum
          echo ./macosbins contents:
          find ./macosbins -type f | xargs shasum
      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: signed-result
          path: |
            ./artifacts
  release-binaries:
    needs: sign-macos-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          pattern: "*result*"
          path: ./artifacts
      - name: List
        run: find ./artifacts
      - name: Upload release binaries
        uses: alexellis/upload-assets@0.4.0
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          asset_paths: '["./artifacts/*.tar.gz", "./artifacts/*.zip"]'